//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace _3dgrowth.Properties {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource1 {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource1() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("_3dgrowth.Properties.Resource1", typeof(Resource1).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   matrix ViewProjection;
        ///matrix Model;
        ///Texture2D diffuseTexture;
        ///
        ///SamplerState mySampler
        ///{
        ///};
        ///
        ///struct VertexOutput
        ///{
        ///    float4 Position : SV_Position;
        ///	float4 Normal : NORMAL;
        ///	float2 TextureCoordinate : TEXCOORD;
        ///};
        /// 
        ///VertexOutput TestVertexShader(VertexOutput input)
        ///{
        ///    VertexOutput output = input;
        ///    output.Position = mul(output.Position, ViewProjection);
        ///    return output;
        ///}
        ///
        ///float4 TestPixelShader(VertexOutput input) : SV_Target
        ///{
        ///	float4 tex = diffuseTexture.Sample(mySampler, [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Ambient {
            get {
                return ResourceManager.GetString("Ambient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   matrix ViewProjection;
        ///matrix Model;
        ///Texture2D diffuseTexture;
        ///
        ///cbuffer Constant
        ///{
        ///	float EyePositionX;
        ///    float EyePositionY;
        ///    float EyePositionZ;
        ///};
        ///
        ///SamplerState mySampler
        ///{
        ///};
        ///
        ///struct VertexOutput
        ///{
        ///    float4 Position : SV_Position;
        ///	float4 Normal : NORMAL;
        ///	float2 TextureCoordinate : TEXCOORD;
        ///};
        /// 
        ///VertexOutput TestVertexShader(VertexOutput input)
        ///{
        ///    VertexOutput output = input;
        ///    output.Position = mul(output.Position, ViewProjection);
        ///    return output;
        ///}
        ///
        ///float4 [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BlinnPhong {
            get {
                return ResourceManager.GetString("BlinnPhong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap Cats {
            get {
                object obj = ResourceManager.GetObject("Cats", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   matrix ViewProjection;
        ///matrix Model;
        ///Texture2D diffuseTexture;
        ///
        ///SamplerState mySampler
        ///{
        ///};
        ///
        ///struct VertexPositionTexture
        ///{
        ///    float4 Position : SV_Position;
        ///	float2 TextureCoordinate : TEXCOORD;
        ///};
        /// 
        ///VertexPositionTexture TestVertexShader(VertexPositionTexture input)
        ///{
        ///    VertexPositionTexture output = input;
        ///    output.Position = mul(output.Position, ViewProjection);
        ///    return output;
        ///}
        ///
        ///VertexPositionTexture TestVertexShader2(VertexPositionTexture input)
        ///{
        ///	VertexPositionTexture [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string EffectTest {
            get {
                return ResourceManager.GetString("EffectTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   matrix ViewProjection;
        ///matrix Model;
        ///Texture2D diffuseTexture;
        ///
        ///SamplerState mySampler
        ///{
        ///};
        ///
        ///struct VertexOutput
        ///{
        ///    float4 Position : SV_Position;
        ///	float4 Normal : NORMAL;
        ///	float2 TextureCoordinate : TEXCOORD;
        ///};
        /// 
        ///VertexOutput TestVertexShader(VertexOutput input)
        ///{
        ///    VertexOutput output = input;
        ///    output.Position = mul(output.Position, ViewProjection);
        ///    return output;
        ///}
        ///
        ///float4 TestPixelShader(VertexOutput input) : SV_Target
        ///{
        ///	float4 tex = diffuseTexture.Sample(mySampler, [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Lambert {
            get {
                return ResourceManager.GetString("Lambert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap Penguins {
            get {
                object obj = ResourceManager.GetObject("Penguins", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   matrix ViewProjection;
        ///matrix Model;
        ///Texture2D diffuseTexture;
        ///
        ///SamplerState mySampler
        ///{
        ///};
        ///
        ///struct VertexOutput
        ///{
        ///    float4 Position : SV_Position;
        ///	float4 Normal : NORMAL;
        ///	float2 TextureCoordinate : TEXCOORD;
        ///};
        /// 
        ///VertexOutput TestVertexShader(VertexOutput input)
        ///{
        ///    VertexOutput output = input;
        ///    output.Position = mul(output.Position, ViewProjection);
        ///    return output;
        ///}
        ///
        ///float4 TestPixelShader(VertexOutput input) : SV_Target
        ///{
        ///    float4 wireColor = float4(0.7, 1, 0.08, 1) [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string WireFrame {
            get {
                return ResourceManager.GetString("WireFrame", resourceCulture);
            }
        }
    }
}
